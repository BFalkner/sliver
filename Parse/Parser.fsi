// Signature file for parser generated by fsyacc
#light
type token = 
  | GT
  | LT
  | SEMI
  | EOF
  | QUOTE
  | WHITESPACE
  | TEXT of (string)
type tokenId = 
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_SEMI
    | TOKEN_EOF
    | TOKEN_QUOTE
    | TOKEN_WHITESPACE
    | TOKEN_TEXT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__starttemplate
    | NONTERM_template
    | NONTERM_BlockList
    | NONTERM_Block
    | NONTERM_Text
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val template : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Element.element list) 
