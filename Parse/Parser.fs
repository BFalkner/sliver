// Implementation file for parser generated by fsyacc
#light
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Element

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | GT
  | LT
  | SEMI
  | EOF
  | QUOTE
  | WHITESPACE
  | NEWLINE
  | OLITEM
  | ULITEM
  | TEXT of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_SEMI
    | TOKEN_EOF
    | TOKEN_QUOTE
    | TOKEN_WHITESPACE
    | TOKEN_NEWLINE
    | TOKEN_OLITEM
    | TOKEN_ULITEM
    | TOKEN_TEXT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__starttemplate
    | NONTERM_template
    | NONTERM_BlockList
    | NONTERM_Block
    | NONTERM_Text
    | NONTERM_OrderedList
    | NONTERM_UnorderedList

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | GT  -> 0 
  | LT  -> 1 
  | SEMI  -> 2 
  | EOF  -> 3 
  | QUOTE  -> 4 
  | WHITESPACE  -> 5 
  | NEWLINE  -> 6 
  | OLITEM  -> 7 
  | ULITEM  -> 8 
  | TEXT _ -> 9 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_GT 
  | 1 -> TOKEN_LT 
  | 2 -> TOKEN_SEMI 
  | 3 -> TOKEN_EOF 
  | 4 -> TOKEN_QUOTE 
  | 5 -> TOKEN_WHITESPACE 
  | 6 -> TOKEN_NEWLINE 
  | 7 -> TOKEN_OLITEM 
  | 8 -> TOKEN_ULITEM 
  | 9 -> TOKEN_TEXT 
  | 12 -> TOKEN_end_of_input
  | 10 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__starttemplate 
    | 1 -> NONTERM_template 
    | 2 -> NONTERM_BlockList 
    | 3 -> NONTERM_BlockList 
    | 4 -> NONTERM_Block 
    | 5 -> NONTERM_Block 
    | 6 -> NONTERM_Block 
    | 7 -> NONTERM_Block 
    | 8 -> NONTERM_Block 
    | 9 -> NONTERM_Text 
    | 10 -> NONTERM_Text 
    | 11 -> NONTERM_OrderedList 
    | 12 -> NONTERM_OrderedList 
    | 13 -> NONTERM_UnorderedList 
    | 14 -> NONTERM_UnorderedList 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 12 
let _fsyacc_tagOfErrorTerminal = 10

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | SEMI  -> "SEMI" 
  | EOF  -> "EOF" 
  | QUOTE  -> "QUOTE" 
  | WHITESPACE  -> "WHITESPACE" 
  | NEWLINE  -> "NEWLINE" 
  | OLITEM  -> "OLITEM" 
  | ULITEM  -> "ULITEM" 
  | TEXT _ -> "TEXT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | QUOTE  -> (null : System.Object) 
  | WHITESPACE  -> (null : System.Object) 
  | NEWLINE  -> (null : System.Object) 
  | OLITEM  -> (null : System.Object) 
  | ULITEM  -> (null : System.Object) 
  | TEXT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 6us; 65535us; 0us; 3us; 4us; 5us; 22us; 23us; 25us; 26us; 27us; 28us; 30us; 31us; 7us; 65535us; 0us; 18us; 4us; 18us; 8us; 9us; 22us; 18us; 25us; 18us; 27us; 18us; 30us; 18us; 6us; 65535us; 0us; 6us; 4us; 6us; 22us; 6us; 25us; 6us; 27us; 6us; 30us; 6us; 6us; 65535us; 0us; 7us; 4us; 7us; 22us; 7us; 25us; 7us; 27us; 7us; 30us; 7us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 12us; 20us; 27us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 3us; 1us; 2us; 1us; 3us; 1us; 3us; 2us; 4us; 12us; 2us; 5us; 14us; 1us; 6us; 2us; 6us; 10us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 7us; 2us; 8us; 10us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 13us; 16us; 19us; 21us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; |]
let _fsyacc_action_rows = 32
let _fsyacc_actionTableElements = [|5us; 32768us; 1us; 15us; 4us; 8us; 7us; 22us; 8us; 27us; 9us; 19us; 0us; 49152us; 1us; 16385us; 2us; 4us; 0us; 16386us; 5us; 32768us; 1us; 15us; 4us; 8us; 7us; 22us; 8us; 27us; 9us; 19us; 0us; 16387us; 1us; 16388us; 6us; 24us; 1us; 16389us; 6us; 29us; 1us; 32768us; 9us; 19us; 2us; 32768us; 4us; 10us; 5us; 20us; 1us; 32768us; 5us; 11us; 1us; 32768us; 1us; 12us; 1us; 32768us; 9us; 13us; 1us; 32768us; 0us; 14us; 0us; 16390us; 1us; 32768us; 9us; 16us; 1us; 32768us; 0us; 17us; 0us; 16391us; 1us; 16392us; 5us; 20us; 0us; 16393us; 1us; 32768us; 9us; 21us; 0us; 16394us; 5us; 32768us; 1us; 15us; 4us; 8us; 7us; 22us; 8us; 27us; 9us; 19us; 0us; 16395us; 1us; 32768us; 7us; 25us; 5us; 32768us; 1us; 15us; 4us; 8us; 7us; 22us; 8us; 27us; 9us; 19us; 0us; 16396us; 5us; 32768us; 1us; 15us; 4us; 8us; 7us; 22us; 8us; 27us; 9us; 19us; 0us; 16397us; 1us; 32768us; 8us; 30us; 5us; 32768us; 1us; 15us; 4us; 8us; 7us; 22us; 8us; 27us; 9us; 19us; 0us; 16398us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 6us; 7us; 9us; 10us; 16us; 17us; 19us; 21us; 23us; 26us; 28us; 30us; 32us; 34us; 35us; 37us; 39us; 40us; 42us; 43us; 45us; 46us; 52us; 53us; 55us; 61us; 62us; 68us; 69us; 71us; 77us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 3us; 1us; 1us; 7us; 3us; 1us; 1us; 3us; 2us; 4us; 2us; 4us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16386us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 16391us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 16396us; 65535us; 16397us; 65535us; 65535us; 16398us; |]
let _fsyacc_reductions ()  =    [| 
# 139 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Element.element list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_starttemplate));
# 148 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BlockList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 13 "Parser.fsy"
                      List.rev(_1) 
                   )
# 13 "Parser.fsy"
                 : Element.element list));
# 159 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 16 "Parser.fsy"
                      [_1] 
                   )
# 16 "Parser.fsy"
                 : 'BlockList));
# 170 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BlockList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 17 "Parser.fsy"
                      _3 :: _1 
                   )
# 17 "Parser.fsy"
                 : 'BlockList));
# 182 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'OrderedList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "Parser.fsy"
                      OrderedList(List.rev _1) 
                   )
# 20 "Parser.fsy"
                 : 'Block));
# 193 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'UnorderedList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "Parser.fsy"
                      UnorderedList(List.rev _1) 
                   )
# 21 "Parser.fsy"
                 : 'Block));
# 204 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Text)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "Parser.fsy"
                      Anchor(_2, _6) 
                   )
# 22 "Parser.fsy"
                 : 'Block));
# 216 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "Parser.fsy"
                      Anchor(_2, _2) 
                   )
# 23 "Parser.fsy"
                 : 'Block));
# 227 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Text)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "Parser.fsy"
                      Text(_1) 
                   )
# 24 "Parser.fsy"
                 : 'Block));
# 238 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                      _1 
                   )
# 27 "Parser.fsy"
                 : 'Text));
# 249 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Text)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                      _1 + " " + _3 
                   )
# 28 "Parser.fsy"
                 : 'Text));
# 261 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                      [_2] 
                   )
# 31 "Parser.fsy"
                 : 'OrderedList));
# 272 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'OrderedList)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                      _4 :: _1 
                   )
# 32 "Parser.fsy"
                 : 'OrderedList));
# 284 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                      [_2] 
                   )
# 35 "Parser.fsy"
                 : 'UnorderedList));
# 295 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'UnorderedList)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                      _4 :: _1 
                   )
# 36 "Parser.fsy"
                 : 'UnorderedList));
|]
# 308 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 13;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let template lexer lexbuf : Element.element list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
